<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ljh2000</title>
  <icon>http://ljh2000.github.io/messi.jpg</icon>
  
  <link href="http://ljh2000.github.io/atom.xml" rel="self"/>
  
  <link href="http://ljh2000.github.io/"/>
  <updated>2022-10-27T15:29:50.192Z</updated>
  <id>http://ljh2000.github.io/</id>
  
  <author>
    <name>ljh2000</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Intro to NLP</title>
    <link href="http://ljh2000.github.io/2022/10/27/Intro-to-NLP/"/>
    <id>http://ljh2000.github.io/2022/10/27/Intro-to-NLP/</id>
    <published>2022-10-27T15:28:08.000Z</published>
    <updated>2022-10-27T15:29:50.192Z</updated>
    
    <content type="html"><![CDATA[<p>《自然语言处理入门》 何晗著 人民邮电出版社 </p><span id="more"></span><h1 id="Chapter-2-词典分词"><a href="#Chapter-2-词典分词" class="headerlink" title="Chapter 2 词典分词"></a>Chapter 2 词典分词</h1><h2 id="2-1-词典与切分算法"><a href="#2-1-词典与切分算法" class="headerlink" title="2.1 词典与切分算法"></a>2.1 词典与切分算法</h2><ul><li><p>齐夫定律：单词的词频与词频排名成反比</p></li><li><p>幂律分布（长尾效应）</p></li><li><p>完全切分：遍历文本中连续序列，查询序列是否在词典中（输出所有可能的单词）</p></li><li><p>正向最长匹配：从前往后扫描，优先输出更长的单词（单词越长优先度越高）</p></li><li><p>逆向最长匹配：从后往前扫描，保留最长单词</p></li><li><p>双向最长匹配：</p><ul><li>同时执行正向和逆向最长匹配，若两者的词数不同，则返回词数更少的那一个</li><li>否则，返回两者中单字更少的那一个。当单字数也相同时，优先返回逆向最长匹配的结果。</li></ul></li><li><p>字典树（trie树、前缀树）</p><ul><li>字典树中每条边对应一个字</li><li>从根节点往下的路径构成字符串</li><li>根节点完美散列，其余节点用二分查找（仅在根节点实现散列策略，普通节点维护数组的有序性，基于数组实现二分查找）</li></ul></li><li><p>双数组字典树（DAT）：base&#x2F;check 双数组</p><ul><li><p>常规字典树，$c$ 个子节点时，每次状态转移的复杂度为 $O(\log c)$</p></li><li><p>当状态 b 接受字符 c 转移到状态 p 时</p><pre class="language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> base<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+</span> c   check<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">[</span>b<span class="token punctuation">]</span></code></pre></li><li><p>单次状态转移的时间复杂度都是常数</p></li></ul></li><li><p>AC 自动机</p><ul><li>DAT 实现全切分的复杂度为 $O(n^2)$，AC自动机一次扫描就能查询出所有的单词，广泛用于多字符串搜索</li><li>多模式匹配：给定多个词语（模式串），从母文本中匹配它们</li><li>AC 自动机为前缀树上的每个节点建立一棵后缀树：<ul><li>goto 表：将每个模式串索引到前缀树上，根节点还接受任意其他字符并转移到自己</li><li>output 表：从初始状态到当前状态的路径本身对应的模式串 + 路径的后缀所对应的模式串</li><li>fail 表：存储状态转移失败后回退的最佳状态，即能记住已匹配上的字符串的最长后缀那个状态，<ul><li></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;《自然语言处理入门》 何晗著 人民邮电出版社 &lt;/p&gt;</summary>
    
    
    
    <category term="Book" scheme="http://ljh2000.github.io/categories/Book/"/>
    
    
    <category term="NLP" scheme="http://ljh2000.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://ljh2000.github.io/2022/10/23/Adversarial%20Robustness%20-%20Theory%20and%20Practice/"/>
    <id>http://ljh2000.github.io/2022/10/23/Adversarial%20Robustness%20-%20Theory%20and%20Practice/</id>
    <published>2022-10-23T14:13:15.831Z</published>
    <updated>2022-10-23T15:15:10.329Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://adversarial-ml-tutorial.org/">https://adversarial-ml-tutorial.org/</a></p><span id="more"></span><h1 id="Chapter-1-Introduction-to-adversarial-robustness"><a href="#Chapter-1-Introduction-to-adversarial-robustness" class="headerlink" title="Chapter 1 - Introduction to adversarial robustness"></a>Chapter 1 - Introduction to adversarial robustness</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;链接：&lt;a href=&quot;https://adversarial-ml-tutorial.org/&quot;&gt;https://adversarial-ml-tutorial.org/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LibDX:A Cross-Platform and Accurate System to Detect Third-Party Libraries in Binary Code</title>
    <link href="http://ljh2000.github.io/2022/10/16/LibDX/"/>
    <id>http://ljh2000.github.io/2022/10/16/LibDX/</id>
    <published>2022-10-16T15:00:06.000Z</published>
    <updated>2022-10-17T13:56:33.629Z</updated>
    
    <content type="html"><![CDATA[<p>论文链接：<a href="https://ieeexplore.ieee.org/document/9054845">LibDX: A Cross-Platform and Accurate System to Detect Third-Party Libraries in Binary Code | IEEE Conference Publication | IEEE Xplore</a></p><span id="more"></span><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>第三方库的大规模使用带来的安全隐患：侵犯许可协议、安全漏洞。</li><li>C&#x2F;C++的库识别困难在于编译进程隐藏了代码的大部分特征</li><li>同一个开源包可能因为不同的编译进程而编译为不同的二进制代码</li><li>作者推出了LibDX系统，能实现<strong>平台无关</strong>、<strong>全自动</strong>地检测二进制文件中的第三方库调用<ul><li>优秀的特征提取程序，解决了不同二进制文件中的编译差异</li><li>创新地引进了逻辑特征块的概念，能应用于解决超大规模特征数据库下特征再复制的问题</li></ul></li><li>作者建立了来自多个平台的大型数据集，并且使用了包含大量C&#x2F;C++二进制文件的包测试<ul><li>准确率 92%，召回率97%，达到目前的最高水准</li><li>已使用闭源的商业应用验证，并且发现了一些侵犯许可的案例</li></ul></li></ul><h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><ul><li>开源代码网站：Github、SourceForge、Google Code</li><li>包管理软件：APT、RPM、Homebrew、CocoaPods、NuGet</li><li>第三方库的大规模使用减少了开发成本，缩短了开发周期，能让开发者专注于功能开发<ul><li>常用的第三方库调用方式：包含源码、动态链接库、运行可执行文件</li><li>开源库通常会附有调用限制和证书，忽视产权和调用限制的产品往往会造成一些商业纠纷</li><li>广泛使用的公共第三方库漏洞会对用户造成很大安全隐患，并且很多组织并不会频繁更新其调用的第三方库版本</li></ul></li><li>开源代码<ul><li>可以通过现有的源码检测技术来检查复用情况</li><li>但是很多作为商业产品的软件常常是不公开代码的，而且诸如Google-Mobile-Ads-SDK等是闭源库，开发者应用时需要调用编译好的二进制文件，并不能接触源码</li></ul></li><li>二进制文件<ul><li>在以可执行的二进制文件作为发布版本的项目中，编译者将C&#x2F;C++代码编译成不同操作系统的机器语言代码，例如函数名、变量名、函数调用关系等代码特征在编译时被删去了</li><li>二进制文件的不可靠给特征提取、标记检测带来了极大困难，并且如果错误的特征被用作标记，很可能会造成低匹配率以及假阳样本数</li><li>反编译技术尝试将二进制代码恢复成源码（IDA），但是效果不佳并且很难实现自动化</li><li>平台与环境差异对特征提取和目标检测带来了巨大困扰</li><li>LibDX是首个能覆盖不同平台的检测系统</li></ul></li><li>LibDX能实现多平台兼容、全自动检测，识别第三方库的二进制文件特征，提取特征并为每个第三方库建立标记，从而建立庞大的特征数据库<ul><li>给定检测目标（实际应用，可能封装成任何形式），系统使用跨平台的文件处理程序分析其二进制文件，并提取特征，匹配特征数据库的数据</li><li>创新地引入了逻辑特征块的概念，表示代码的逻辑特征</li><li>识别应用和第三方库中的逻辑特征块，生成目标的基因图谱</li><li>由于代码和特征复用，在原始基因图谱中可能有一些假阳样本</li><li>对于符合同一逻辑特征块的二进制文件，分成一组，从每一组选取最佳的匹配作为检测结果</li></ul></li><li>分析者可以通过第三方库信息数据库，获取关于侵犯协议和漏洞风险的安全报告</li><li>LibDX系统的主要贡献<ul><li>编写了文件处理器和特征提取器，用以分析不同包和二进制形式文件的应用</li><li>创新地采取了二进制文件特征提取方式，建立了第三方库的数据库</li><li>创新地引入了逻辑特征块概念，并用以处理代码和特征复用的情形</li><li>高准确率、高召回率</li></ul></li></ul><h2 id="相关工作（与LibDX相关的现有技术工作）"><a href="#相关工作（与LibDX相关的现有技术工作）" class="headerlink" title="相关工作（与LibDX相关的现有技术工作）"></a>相关工作（与LibDX相关的现有技术工作）</h2><ul><li><p>所有的库检测系统，本质上说是同源代码检测系统</p></li><li><p>第三方库可以分为两类：C&#x2F;C++、Java</p><ul><li><p>Java的字节码并非二进制格式，Java包括了很多可用的特征，能很方便检测同源性，所以Java库同源检测技术很难应用于C&#x2F;C++库</p></li><li><p>C&#x2F;C++库的检测系统可以分为三类：Source-to-Source、Binary-to-Source、Binary-to-Binary</p></li><li><p>相关商业产品：Insignary、FlexNet Code Insight、Black Duck SCA（都采用的是binary-to-source）</p></li></ul></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>设计目标<ul><li>大体量，大规模</li><li>跨平台</li><li>全自动</li></ul></li><li>两大主要挑战与困难：不同平台上各种各样的文件格式、大规模数据库产生的特征副本<ul><li>File Format：LibDX采用binary-to-binary的相似度比较</li><li>Feature Duplication</li></ul></li><li>数据<ul><li>关注提供动态链接库文件的packages：libraries-&gt;dynamic link library files-&gt;features</li><li>9537 packages，包含25794个二进制文件</li></ul></li><li>特征选取<ul><li>稳定且自动化？字符串常量？能同时从源和二进制代码提取的？</li><li>LibDX从库中只读的DATA数据段选取内容作为特征，通常由字符串常量组成</li><li>字符串常量只能表达句法特征，而不能表达代码语义逻辑，作者创新地引入了逻辑特征块来表示语义关系和进一步生成基因图谱，用以目标检测</li><li>LibDX得到最佳匹配结果，并相应给出最终检测结果</li></ul></li><li>权重系数<ul><li>使用TF-IDF系数能反映大数据集下术语在文档中的重要程度</li></ul></li><li>架构<ul><li>File Processor -&gt; Feature Extractor -&gt; Detector</li><li>File Processor：接收库的多种格式的包并正确识别文件格式，快速分析目标文件，并提取出二进制文件</li><li>Feature Extractor：读取不同平台二进制文件中的只读DATA数据段，并提取其特征和模糊的文件名，来建立分层的库信息数据库，匹配目标结果</li><li>LibDX主要使用Python开发，数据存储在MongoDB，并且为每个库和二进制文件分配了ID</li><li>key是字符串，相应的value是key存在的二进制文件list</li></ul></li><li>与类似工作的比较</li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul><li><p>File Processor</p><ul><li>正确识别文件类型（可能存在的问题：无后缀、相同后缀却是不同类型）</li><li>分为三类：压缩文件（zip、tar）、二进制文件（PE、ELF）和其他文件（txt、png）</li></ul></li><li><p>Feature Extractor</p><ul><li>选取DATA数据段的静态变量作为提取的主要特征</li><li>选取特征序列的标准：以特定串开头结尾、都为可打印字符、长度超过5</li></ul></li><li><p>Logic Feature Block</p><ul><li>字符串常量是句法特征，并不能完全体现代码逻辑</li><li>根据提取的特征数据库，由特征list得到匹配特征块，并将一个匹配块视为一个逻辑特征块<ul><li>至少含有一个positive flag</li><li>没有任何negative flag</li></ul></li><li>编译器建立抽象语法树的依据是解析代码时的逻辑</li></ul></li><li><p>Matching method</p><ul><li><p>上述工作计算了每个库的匹配率，并设置了阈值来决定样本是否为阳性</p></li><li><p>我们对于本地数据库在提取了feature list后再计算匹配率，以TF-IDF计算权重</p></li><li><p>初步筛选假阳样本的策略：（满足以下条件才合法）</p><ul><li>匹配率大于0.25</li><li>数据集该二进制文件含有超过20个feature</li></ul></li><li><p>上述策略依据：高匹配率+少量的特征数时不可信</p></li><li><p>候选对象根据匹配率排序，底部候选对象的匹配率最高</p></li><li><p>对于被筛选掉的不足20个feature的候选者，进一步检测</p><ul><li><p>如果被动态链接重用，可能会有相同的fuzzy name</p></li><li><p>如果被数据集另一个库包含，不能得到fuzzy name，但是调用的库可以被检测为positive match</p></li></ul></li></ul></li></ul><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><ul><li>用标注好的校准数据集测试</li><li>高准确率、召回率，测试有效</li></ul><h2 id="改进方向"><a href="#改进方向" class="headerlink" title="改进方向"></a>改进方向</h2><ul><li>“不同特征块表示不同代码含义”，这一假设并不总是成立，不同名可能同一意义，在测试数据中有相应的假阳样本</li><li>所得测试结果并不能代表整个开源世界的代码</li><li>漏洞检测仍需改进，并不是所有的库都适用CVE搜索，版本号定位有时非常困难</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;论文链接：&lt;a href=&quot;https://ieeexplore.ieee.org/document/9054845&quot;&gt;LibDX: A Cross-Platform and Accurate System to Detect Third-Party Libraries in Binary Code | IEEE Conference Publication | IEEE Xplore&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Paper" scheme="http://ljh2000.github.io/categories/Paper/"/>
    
    
    <category term="KeenLab" scheme="http://ljh2000.github.io/tags/KeenLab/"/>
    
    <category term="SCA" scheme="http://ljh2000.github.io/tags/SCA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ljh2000.github.io/2022/10/16/hello-world/"/>
    <id>http://ljh2000.github.io/2022/10/16/hello-world/</id>
    <published>2022-10-16T13:01:36.559Z</published>
    <updated>2022-10-16T13:01:36.559Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
